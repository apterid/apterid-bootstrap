// Copyright (C) 2016 The Apterid Developers - See LICENSE

using System.Numerics;

ironmeta ApteridParser<char, Syntax.Node> : ApteridParserBase
{
    ApteridSource = SourcePart* lex.EOF -> { Make<Syntax.Source>(_IM_Result) };

    SourcePart = Directive | TopLevelModule | lex.SE+ | ErrorSection+;

    /////////////////////////////////////////////////////////////////
    // Directives

    Directive = '#' lex.WS? DirectiveExpression;

    DirectiveExpression = "if" lex.SC '!'? lex.SC lex.Identifier;
    DirectiveExpression = "endif";


    /////////////////////////////////////////////////////////////////
    // Modules

    TopLevelModule = 
        lex.SC?:indent 
        (lex.Keyword("public") lex.SC)?:vis 
        lex.Keyword("module") (lex.SC | !"expected qualified identifier")
        lex.QualifiedIdentifier:name lex.SC?
        lex.EQ (lex.SE | !"expected new line then module body")
        ModuleBody(indent):body ->
        { 
            Make<Syntax.Module>(_IM_Result, new 
            {
                flags = GetFlags(vis.Results),
                name = name.Results.FirstOrDefault(), 
                body = body.Results 
            }) 
        };

    /////////////////////////

    ModuleBody :outer =
        &(lex.SC:inner ?(inner.Length() > outer.Length()) | !"the contents of a module must be indented")
        ModulePart(inner)*;

    ModulePart :indent = Directive lex.SE;
    ModulePart :indent = lex.SE;
    ModulePart :indent =
        (lex.SC:ws ?(ws.Length() == indent.Length()) | !"parts of a module must be indented and aligned")
        ModuleItem(indent)
        lex.SE;
    ModulePart :indent = ErrorSection;

    /////////////////////////

    ModuleItem :indent = ModuleBinding(indent);


    /////////////////////////////////////////////////////////////////
    // Bindings

    ModuleBinding :indent = 
        (lex.Keyword("public") lex.SC)?:vis 
        (lex.Identifier:name lex.WS? | !"expected binding name")
        (lex.EQ lex.WS?              | !"expected \"=\"")
        (exp.Expression(indent):body | !"expected expression") ->
        {
            var args = new 
            {
                flags = GetFlags(vis.Results),
                name = name.Results.FirstOrDefault(), 
                pattern = (Syntax.Pattern)null, 
                body = body.Results 
            };
            return Make<Syntax.Binding>(_IM_Result, args);
        };
    

    /////////////////////////////////////////////////////////////////
    // ErrorSection

    ErrorSection :indent = (~DoubleReturn .)+ DoubleReturn -> { Make<Syntax.ErrorSection>(_IM_Result) };
    DoubleReturn = lex.EOL lex.WS? (lex.EOL | lex.EOF);
}
